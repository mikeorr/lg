<?xml version="1.0"?>
<!-- <!DOCTYPE doc SYSTEM "article.dtd"> -->
<?xml-stylesheet href="article.xsl" type="text/xsl"?>
<?cocoon-process type="xslt"?>

<!-- Written by Eoin Lane "eoinlane@esatclear.ie" -->

<page>
<title>Linux, Java and XML</title>
<author><link><text>Eoin Lane</text><url>mailto:eoinlane@esatclear.ie</url></link></author>
<abstract>This article is a basic introduction to the new web markup
language XML and the transformation language XSL. Here I show
how the Apache web server can be configured using the servlet engine
JServ, to do client side XML/XSL transformation using Apache's Cocoon servlet.</abstract>
<update>Future updates for this article will be located at <link><text>http://www.inconn.ie/article/cocoon.htm</text><url>http://www.inconn.ie/article/cocoon.htm.</url></link></update> 
<section>
<sectionTitle>Introduction</sectionTitle>
<para><emphasis>The eXtensible Markup Language</emphasis> (XML) is a powerful new web markup language (ISO approval in February 1999). It is a powerful way of separating web content and
style. A lot has been written about XML, but to be used effectively in web design the technologies behind it must be understood. To this end I have added my own two pence worth to the already
vast amount of literature out there on the subject. This article is not
a place to learn XML, nor is it a place where the capabilities of XML are
explored to their fullest, but is is a place where the technologies behind XML can be
put in practice immediately.</para>
<para>Before I go any further, I should recommend the two sites where
definitive information on XML can be obtained. The first is the <emphasis>World
Wide Web Consortium (W3C) site </emphasis><link><text>http://www.w3.org/</text><url>http://www.w3.org/</url></link>. The W3C are responsible for the XML specification. The second site is the
XML <emphasis>frequency asked
questions</emphasis> site (<link><text>http://www.ucc.ie/xml/</text><url>http://www.ucc.ie/xml/</url></link>)
 which will answer any other questions. I also recommend the XML
pages hosted by IBM,
<link><text>http://www.ibm.com/xml/</text><url>http://www.ibm.com/xml/</url></link>,
where you will find a wide range of excellent tutorials and articles on XML.</para> 
<para>The original web language, SGML (around since 1986) is the mother of all mark-up
languages. SGML can be used to document any
conceivable system; from complex aeronautical design to ancient Chinese
dialects. However, it
suffers from being over complex and unwieldy for routine web
applications. HTML is basically a very cut down version
of SGML, originally designed with the scientific publishing community
in mind. It is a
simple mark-up language (it has been said "anyone with a pulse
can learn it") and with the explosion of the web it is clear that the people with pulses have spoken. Since its foundation the web has
grown in complexity and it has long outgrown its lowly beginning in the
scientific community.</para>
<para>Today web pages need to be dynamic, interactive,
back-ended with databases, secure and eye catching to compete in an ever
more crowded cyberspace. Enter XML, a new mark-up language to deal
with the complexities of modern web design. XML is only 20 percent as
complex as SGML and can handle 80 percent of SGML situations (believe me
when you are talking about coding ancient Chinese dialects, 80 percent
is plenty). In the following section I will will briefly compare two markup examples, one in HTML and the second is XML, demonstrating the benefits of an XML approach. In the final section I will show you
how to set up an Apache web server to serve an XML document so
that you may begin immediately to start using XML in your web design.</para>
</section>
<section>
<sectionTitle>HTML</sectionTitle>
<para> The following example is a very simple HTML document that everyone will be familiar with:
<markup>
</markup>
Two important points can be made about this document. 
<list>
<item> The content and style are tied together in the document.</item>
<item> It would be very difficulty for a search program to search
this document and extract the mail address of Eoin lane.</item>
</list>
XML addresses these two issues.
</para>
</section>
<section>
<sectionTitle>XML</sectionTitle>
<para>The XML equivalent is as follows
<markup>
</markup>
</para>
<para>The first thing to note is that this document, along with all
other valid XML
documents, is <emphasis>well formed</emphasis>. To be a <emphasis>well formed</emphasis>
document every tag must have an open and close brace. A program
searching for the mail address then has only to locate the text in between
the opening and closing tags of <emphasis>mail</emphasis>.
</para>
<para>The second and crucial point is that this XML document contains just data. There is nothing in this document
that dictates how to display the author's name or his mail address. In practice it is easier to
think about web design in terms of data and presentation separately. In
the design of medium to large web sites, where all the pages have the
same look and only the data is changing form page to page, this is
clearly a better solution. Also it allows a division of labour where, style and content can be
handled by two different departments, working independently. It also allows the possibility of having one set of data with a number of ways of presenting
it.</para>
<para>
An XML document can be presented using two different methods. One is using a Cascading Style Sheet (CSS) (see <link><text>http://www.w3.org/style/css/</text><url>http://www.w3.org/style/css/</url></link>) to markup up the text in
HTML. The second is using a transformation language called XSL, which
converts the XML document into HTML, XML, pdf, ps, or
Latex. As to which one to use, the W3C (the people responsible for these specification) has this to say:<statement>Use CSS when
you can, use XSL when you must.</statement> They go on to say:
<para><emphasis>The reason is that CSS is much easier to use, easier to
learn, thus easier to maintain and cheaper. There are WYSIWYG editors
for CSS and in general there are more tools for CSS than for XSL. But
CSS's simplicity means it has its limitations. Some things you cannot
do with CSS, or with CSS alone. Then you need XSL, or at least the
transformation part of XSL.</emphasis></para>
<para><emphasis>So what are the things you cannot do with
CSS? In general everything that needs transformations. For example, if
you have a list and want it displayed in lexicographical order, or if
words have to be replaced by other words, or if empty elements have to
be replaced by text. CSS can do some text generation, but only for generating small things, such as numbers of section headers.</emphasis></para>
</para>
</section>
<section>
<sectionTitle>XSL</sectionTitle>
<para> XSL <link><text>(eXtensible Stylesheet
Language)</text><url>http://www.w3.org/style/xsl/</url></link> is
the language used to transform and display XML documents. It is not yet finished so
beware! It is a complex document formating
language that is itself an XML document. It can be further subdivided
in two parts: transformation (XSLT) and formatting objects (sometimes
referred to as FO, XSL:FO or simply XSL). For the sake of simplicity I
will only deal with XSLT here.</para>
<subsection>
<subsectionTitle>XSL Transformations (XSLT)</subsectionTitle>
<para>As of the 16th of November 1999 the World Wide Web Consortium
has announced the publication of XSLT as a W3C Recommendation. This
basically means that XSLT is stable and will not change in the
future. The above XML document can be transformed into a HTML document and
subsequently displayed on any browser using the following XSLT file. 
<markup>
</markup>
</para>
<para>To learn more about XSLT, I recommend the XSLINFO site
(<link><text>http://www.xslinfo.com/</text><url>http://www.xslinfo.com/</url></link>
as a good starting point. Also I found the <link><text>revised Chapter 14 from the
XML
Bible</text><url>http://metalab.unc.edu/xml/books/bible/updates/14.html</url></link>
to be very good. This revision is based on the specifications that
eventually became the recommendation.</para>
<para>With the arrival of the next generation of browsers,
<emphasis>i.e.</emphasis> Netscape 5 (currently under construction <link><text>http://www.mozilla.org/</text><url>http://www.mozilla.org</url></link>)
this transformation with be done client side. When an XML
file is requested the
corresponding XSL file will be sent along with it, and the transformation will be done by
the browser. Currently there are a lot of browsers only capable of
displaying HTML, and until then the transformation must be done server
side. This can be accomplished by using Java
servlets (Java server side programs).</para> 
<para>The Cocoon servlet is such a
servlet, written by some very clever people at Apache (<link><text>http://www.apache.org/</text><url>http://www.apache.org/</url></link>). It basically takes
an XML document and transforms it using a XSL document. An example of
such a transformation would be to convert the XML document into HTML
so that the browser can display it. So if your web
server is configured to run servlets, and you include the cocoon
servlet, then you can start designing your web pages using XML. The rest of this article will show exactly how to do this.</para>
</subsection>
</section>

<section><sectionTitle>How do I do it?</sectionTitle>
<para>I have tested the following instructions on a fresh installation of Red Hat 6.0, so I know it works.</para>
<subsection><subsectionTitle>Apache Web Server</subsectionTitle><para>First set up the Apache web server. On Red Hat this comes
pre installed but I want you to blow it away using: <instruction>rpm
-e --nodeps apache</instruction> and do not worry about the error
messages. Next get a hold of the most recent Apache (<link><text>http://www.apache.org/</text><url>http://www.apache.org/</url></link>) (currently verison 1.3.9) and copy it somewhere handy. I put mine in
<dir>/usr/local/src</dir>. Tar and unzip the file using:
<instruction>tar zxvf apache_1.3.9.tar.gz</instruction> This will
expand the installation into the directory
<dir>/usr/local/src/apache_1.3.9</dir>. Change into this directory
and configure, build and install the application using the
following:<instruction>./configure --prefix=/usr/local/apache
--mandir=/usr/local/man --enable-shared=max</instruction><instruction>make</instruction><instruction>make install</instruction>
This will install apache into the directory
<dir>/usr/local/apache</dir> and the important file to note here is
<file>http.conf</file> which can be found in the directory
<dir>/usr/local/apache/conf</dir>. This file contains most of the
important information necessary to run apache correctly. It contains
information on: where to serve the web documentsfrom, virtual web
servers and folder aliases. We will be returning to this file shortly so become familiar with it's general
layout. At this stage I had to reboot Linux and then start Apache using the following
instruction <instruction>/usr/local/apache/bin/apachectl start</instruction>
 To test it, point your web browser to <link><text>http://localhost/</text><url>http://localhost/</url></link> and
you're in business, hopefully!
For good web design and planning I would refer you to an article that
I found invaluable in setting up my own web site: <link><text>Better Web Site
Design under
Linux</text><url>http://www.linuxgazette.com/issue43/gibbs/Web_Design.html</url></link></para></subsection>

<subsection><subsectionTitle>Java and JSDK</subsectionTitle>
<para>As of October, IBM have released the Java Development Kit 1.1.8 for
Linux. It claims to be faster than the corresponding Blackdown's
(<link><text>http://www.blackdown.org/</text><url>http://www.blackdown.org/</url></link>)
and Sun's
JDKs. Download IBM JDK (see
<link><text>http://www.ibm.com/java/</text><url>http://www.ibm.com/java/</url></link>).
Again tar and unzip this into the
<dir>/usr/local/src/jdk118</dir> directory. Next, download the
<link><text>JavaSoft's JSDK2.0</text><url>http://java.sun.com/products/servlet/</url></link>, the solaris version (not JSDK2.1 or any other flavours you might be
tempted to get) and tar and unzip it - again I put it in
<dir>/usr/local/src/JSDK2.0</dir>. Add the following or equivalent
to <file>/etc/profile</file> to make them available to your system. 
<fileText>
<text>JAVA_HOME="/usr/local/src/jdk118"</text>
<text>JSDK_HOME="/usr/local/src/JSDK2.0"</text>
<text>CLASSPATH="$JAVA_HOME/lib/classes.zip:$JSDK_HOME/lib/jsdk.jar"</text>
<text>PATH="$JAVA_HOME/bin:$JSDK_HOME/bin:$PATH"</text>
<text>export PATH CLASSPATH JAVA_HOME JSDK_HOME</text>
</fileText>
To test them
run: <instruction>java -version</instruction> at the command prompt, and you should get back the
following message <msg><line>java version "1.1.8"</line>
</msg> and to test the servlet development kit run:
<instruction>servletrunner</instruction> and if all goes well you
should get back the following: <msg><line>servletrunner starting with settings:</line>
  <line>port = 8080</line>
  <line>backlog = 50</line>
  <line>max handlers = 100</line>
  <line>timeout = 5000</line>
  <line>servlet dir = ./examples</line>
  <line>document dir = ./examples</line>
  <line>servlet propfile = ./examples/servlet.properties</line>
</msg>
We are now ready to install Apache's servlet engine, ApacheJServ.</para>
</subsection>
<subsection>
<subsectionTitle>ApacheJServ</subsectionTitle>
<para>Again, download the latest ApacheJServ (version 1.0 at this time,
although version 1.1 is in it's final beta stage) from Apache's Java Site
(<link><text>http://java.apache.org/</text><url>http://java.apache.org/</url></link>)
and expand it into <dir>/usr/local/src/ApacheJServ-1.0/</dir>. Configure, make and
install it using the following instructions: <instruction>./configure
--with-apache-install=/usr/local/apache --with-jsdk=/usr/local/src/JSDK2.0</instruction>
<instruction>make</instruction><instruction>make install</instruction>
When this has successfully completed add the following line to the end
of the <file>http.conf</file> file that I refereed to earlier during the Apache web
server installation: <fileText><text>Include /usr/local/src/ApacheJServ-1.0/example/jserv.conf</text></fileText>and restart the web server using:
<instruction>/usr/local/apache/bin/apachectl restart</instruction> Now
comes the moment of truth, point your web browser to
<link><text>http://localhost/example/Hello</text><url>http://localhost/example/Hello</url></link>
and if you get back the following two lines:<msg><line>Example Apache JServ Servlet</line>
<line>Congratulations, Apache JServ is working!</line> 
</msg>
then you are almost home.</para>
</subsection>
<subsection><subsectionTitle>Cocoon</subsectionTitle>
<para>Finally, download the latest version of Cocoon (version 1.5 at this time) from Apache's Java Site
(<link><text>http://java.apache.org/</text><url>http://java.apache.org/</url></link>).
Cocoon is distributed as a Java jar file and can be extracted using the command 
<emphasis>jar</emphasis>. First, create the directory 
<dir>/usr/local/src/cocoon</dir> and then expand the cocoon jar file
into it:
<instruction>mkdir /usr/local/src/cocoon</instruction>
<instruction>jar -xvf Cocoon_1.5.jar</instruction>

Now comes the tricky part of
configuring the JServ engine to recognise a file with a
<file>.xml</file> extension and to use the cocoon servlet process and
serve them. 
</para>
<para>Locate the file <file>jserv.properties</file> which you will find in the
directory <dir>/usr/local/src/ApacheJServ-1.0/example/</dir> and at
the end of the section that begins:<fileText><text># CLASSPATH environment
value passed to the JVM</text></fileText> add the following:<fileText>
<text>wrapper.classpath=/usr/local/src/cocoon/bin/xxx.jar</text></fileText>
In the case of Cocoon 1.5 this means adding the following three lines:<fileText>
<text>wrapper.classpath=/usr/local/src/cocoon/bin/fop.0110.jar</text>
<text>wrapper.classpath=/usr/local/src/cocoon/bin/openxml.106-fix.jar</text>
<text>wrapper.classpath=/usr/local/src/cocoon/bin/xslp.19991017-fix.jar</text></fileText>
Although these files will change with different versions. The next file to locate is the <file>example.properties</file> file,
again found in the  <dir>/usr/local/src/ApacheJServ-1.0/example/</dir>
directory and add the following line:
<fileText><text>repositories=/usr/local/src/cocoon/bin/Cocoon.jar</text></fileText>
In my <file>example.properties</file> file it meant changing the line:
<fileText><text>repositories=/usr/local/src/ApacheJServ-1.0/example</text></fileText>
to the following:
<fileText><text>repositories=/usr/local/src/ApacheJServ-1.0/example,/usr/local/src/cocoon/bin/Cocoon.jar</text></fileText>
Also add the following line to the end of the
<file>example.properties</file> file:
<fileText><text>servlet.org.apache.cocoon.Cocoon.initArgs=properties=/usr/local/src/cocoon/bin/cocoon.properties</text></fileText>
</para>
<para>The JServ engine is now properly configured and all that is left
for us to do it to tell Apache to direct any call to an XML file (or
any other file you want Cocoon to process) to the Cocoon servlet. For
this we need the JServ configuration file,
<file>jserv.conf</file> mentioned earlier (again in the same directory). Include the following line: <fileText><text>ApJServAction .xml
/example/org.apache.cocoon.Cocoon</text></fileText>
</para>
<para>In order to
access the cocoon documentation and examples add the following lines to
the <emphasis>alias</emphasis> section of
your <file>http.conf</file> file: 

<fileText>Alias /xml/ "/usr/local/src/cocoon/"</fileText>

<markup></markup>
<fileText>Alias /xml/example/ "/usr/local/src/cocoon/example/"</fileText>

<markup></markup>
</para>
<para>
Restart the web browser for this to take effect:
<instruction>/usr/local/apache/bin/apachectl restart</instruction>
Now point your browser to <link><text>http://localhost/xml/</text><url>http://localhost/xml/</url></link>
to browse the documentation and 
<link><text>http://localhost/xml/example/</text><url>http://localhost/xml/example/</url></link>
to try out the examples. If Cocoon complains about a exceeding a memory limit then open the file <file>cocoon.properties</file> found in the <dir>/usr/local/src/cocoon/</dir> directory. Find the line <fileText><text>store.memory = 150000</text></fileText>and change it to something lower like 15000. To try out the PDF examples, which I think
are very cool, you have to have Acrobat Reader installed as a
netscape plug-in, but it is worth the extra effort to get this
working.
</para>
</subsection>
</section>
<section><sectionTitle>Cocoon 2</sectionTitle>
<para>The Cocoon 1.x series has basically been a work in progress. 
What started out as a simple servlet for static XSL transformation has grown into
something much more. With this ongoing development, design
considerations taken at the beginning of the project are now hampering future
developments as the scale and the scope of the project becomes
apparent. To add to this, XSL is also a work in progress,
although the current version of XSLT has become a W3C Recommendation (as of November, 16 1999). 
</para>
<para>Cocoon 2 intends to address these issues and provide us with a
servlet for XML transformations that is scalable to handle large quantities
of web traffic. Web design of medium to large sites in the
future will be based entirely around XML, as its benefit become apparent, and the Cocoon 2 servlet will hopefully provide us with a way to use it effectively.</para>
</section>

<section><sectionTitle>Conclusions</sectionTitle>
<para></para>
<para>Even as I have
been writing this article, Apache have opened a new site dedicated exclusively to
XML
(see <link><text>http://xml.apache.org/</text><url>http://xml.apache.org/</url></link>).
The cocoon project has obviously grown beyond all expectations, and with
the coming of Cocoon 2 will be a commercially viable servlet to
enable design of web sites in XML to become a reality. The people at
Apache deserve a lot of credit for this so write to them and thank them,
join the mailing list and generally lend your support. After
all this is open source code and this is what Linux is all about. </para></section>
</page>

